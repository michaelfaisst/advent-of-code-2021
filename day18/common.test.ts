import {
    add,
    parseTree,
    getTreeString,
    explode,
    split,
    reduce,
    getMagnitude
} from "./common";

test.each([
    { tree: "[1,2]" },
    { tree: "[[1,2],3]" },
    { tree: "[9,[8,7]]" },
    { tree: "[[1,9],[8,5]]" },
    { tree: "[[[[1,2],[3,4]],[[5,6],[7,8]]],9]" },
    { tree: "[[[9,[3,8]],[[0,9],6]],[[[3,7],[4,9]],3]]" },
    { tree: "[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]" }
])("to tree string should work", ({ tree }) => {
    const parsedTree = parseTree(tree);
    expect(getTreeString(parsedTree)).toBe(tree);
});

test.each([
    {
        tree1: "[1,2]",
        tree2: "[[3,4],5]",
        expected: "[[1,2],[[3,4],5]]"
    },
    {
        tree1: "[9,[8,7]]",
        tree2: "[[1,9],[8,5]]",
        expected: "[[9,[8,7]],[[1,9],[8,5]]]"
    },
    {
        tree1: "[9,[8,7]]",
        tree2: "[[[[1,2],[3,4]],[[5,6],[7,8]]],9]",
        expected: "[[9,[8,7]],[[[[1,2],[3,4]],[[5,6],[7,8]]],9]]"
    }
])("add should work", ({ tree1, tree2, expected }) => {
    const t1 = parseTree(tree1);
    const t2 = parseTree(tree2);

    const t = add(t1, t2);
    expect(getTreeString(t)).toBe(expected);
});

test.each([
    {
        tree: "[[[[[9,8],1],2],3],4]",
        expected: "[[[[0,9],2],3],4]"
    },
    {
        tree: "[7,[6,[5,[4,[3,2]]]]]",
        expected: "[7,[6,[5,[7,0]]]]"
    },
    {
        tree: "[[6,[5,[4,[3,2]]]],1]",
        expected: "[[6,[5,[7,0]]],3]"
    },
    {
        tree: "[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]",
        expected: "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"
    },
    {
        tree: "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]",
        expected: "[[3,[2,[8,0]]],[9,[5,[7,0]]]]"
    }
])("explode should work", ({ tree, expected }) => {
    const t = parseTree(tree);
    explode(t);

    expect(getTreeString(t)).toBe(expected);
});

test.each([
    {
        tree1: "[[[[4,3],4],4],[7,[[8,4],9]]]",
        tree2: "[1,1]",
        expected: "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"
    },
    {
        tree1: "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]",
        tree2: "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]",
        expected: "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"
    },
    {
        tree1: "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
        tree2: "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]",
        expected:
            "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]"
    },
    {
        tree1: "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
        tree2: "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]",
        expected:
            "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]"
    },
    {
        tree1: "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]",
        tree2: "[7,[5,[[3,8],[1,4]]]]",
        expected:
            "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]"
    },
    {
        tree1: "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
        tree2: "[[2,[2,2]],[8,[8,1]]]",
        expected: "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]"
    },
    {
        tree1: "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]",
        tree2: "[2,9]",
        expected: "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]"
    },
    {
        tree1: "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]",
        tree2: "[1,[[[9,3],9],[[9,0],[0,7]]]]",
        expected:
            "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]"
    },
    {
        tree1: "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]",
        tree2: "[[[5,[7,4]],7],1]",
        expected: "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]"
    },
    {
        tree1: "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]",
        tree2: "[[[[4,2],2],6],[8,7]]",
        expected: "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"
    }
])("adding and reducing should work", ({ tree1, tree2, expected }) => {
    const t1 = parseTree(tree1);
    const t2 = parseTree(tree2);

    const t = add(t1, t2);
    reduce(t);

    expect(getTreeString(t)).toBe(expected);
});

test.each([
    {
        tree: "[9,1]",
        expected: 29
    },
    {
        tree: "[1,9]",
        expected: 21
    },
    {
        tree: "[[9,1],[1,9]]",
        expected: 129
    },
    {
        tree: "[[1,2],[[3,4],5]]",
        expected: 143
    },
    {
        tree: "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]",
        expected: 1384
    },
    {
        tree: "[[[[1,1],[2,2]],[3,3]],[4,4]]",
        expected: 445
    },
    {
        tree: "[[[[3,0],[5,3]],[4,4]],[5,5]]",
        expected: 791
    },
    {
        tree: "[[[[5,0],[7,4]],[5,5]],[6,6]]",
        expected: 1137
    },
    {
        tree: "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]",
        expected: 3488
    }
])("magnitude should work correctly", ({ tree, expected }) => {
    const t = parseTree(tree);
    expect(getMagnitude(t)).toBe(expected);
});
